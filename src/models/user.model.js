import mongoose from "mongoose";
import bcrypt from "bcryptjs";
import config from "../config/index.js";
import JWT from "jsonwebtoken";
import crypto from "crypto";

const userSchema = new mongoose.Schema(
  {
    name: {
      type: String,
      required: [true, "Name is Required"],
      maxLength: [50, "Name must be less than 50 chars"],
    },
    email: {
      type: String,
      required: [true, "Email is required"],
      unique: true,
    },
    password: {
      type: String,
      required: [true, "Password is required"],
      minLength: [8, "password must be at least  8 chars"],
      select: false,
    },
    forgotPasswordToken: String,
    forgotPasswordExpiry: Date,
  },
  { timestamps: true }
);

/**
 * Encryption of  the password before saving
 */
userSchema.pre("save", async function (next) {
  if (!this.isModified("password")) return next;
  this.password = await bcrypt.hash(this.password, 10);
  next();
});

/**
 * Methods for userSchema
 */
userSchema.methods = {
  // compare password
  comparePassword: async function (enterPassword) {
    return await bcrypt.compare(enterPassword, this.password);
  },

  // generate JWT Token
  getJWTToken: function () {
    return JWT.sign({ _id: this._id, }, config.JWT_SECRET, {
      expiresIn: config.JWT_EXPIRY,
    });
  },

  generateForgetPasswordToken: function () {
    const forgotToken = crypto.randomBytes(20).toString("hex");
    // just to encrypt the token generated by crypto
    this.forgotPasswordToken = crypto
      .createHash("sha256")
      .update(forgotToken)
      .digest("hex");
    // time for token to expire
    console.log(this.forgotPasswordToken);
    this.forgotPasswordExpiry = Date.now() + 20 * 60 * 1000;
    return forgotToken;
  },
};

export default mongoose.model("User", userSchema);
